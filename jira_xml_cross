import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import xml.etree.ElementTree as ET
import pandas as pd
from datetime import datetime
import re
import os

class JiraXMLExtractor:
    def __init__(self, root):
        self.root = root
        self.root.title("JIRA XML to Excel Extractor")
        self.root.geometry("1200x700")
        
        # Data storage
        self.xml_files = []
        self.extracted_data = []
        
        # Setup UI
        self.setup_ui()
        
    def setup_ui(self):
        # Main container
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="JIRA XML Data Extractor", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, pady=10)
        
        # Buttons Frame
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=1, column=0, pady=10, sticky=(tk.W, tk.E))
        
        ttk.Button(button_frame, text="Load XML File(s)", 
                  command=self.load_xml_files).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Extract Data", 
                  command=self.extract_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Export to Excel", 
                  command=self.export_to_excel).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Clear All", 
                  command=self.clear_all).pack(side=tk.LEFT, padx=5)
        
        # Status label
        self.status_label = ttk.Label(button_frame, text="No files loaded", 
                                     foreground="blue")
        self.status_label.pack(side=tk.LEFT, padx=20)
        
        # Notebook for tabs
        notebook = ttk.Notebook(main_frame)
        notebook.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        
        # Tab 1: Data View
        data_frame = ttk.Frame(notebook)
        notebook.add(data_frame, text="Extracted Data")
        
        # Treeview for data display
        tree_scroll_y = ttk.Scrollbar(data_frame, orient=tk.VERTICAL)
        tree_scroll_x = ttk.Scrollbar(data_frame, orient=tk.HORIZONTAL)
        
        self.tree = ttk.Treeview(data_frame, 
                                yscrollcommand=tree_scroll_y.set,
                                xscrollcommand=tree_scroll_x.set)
        
        tree_scroll_y.config(command=self.tree.yview)
        tree_scroll_x.config(command=self.tree.xview)
        
        tree_scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        tree_scroll_x.pack(side=tk.BOTTOM, fill=tk.X)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Tab 2: Analysis
        analysis_frame = ttk.Frame(notebook)
        notebook.add(analysis_frame, text="Analysis & Summary")
        
        self.analysis_text = tk.Text(analysis_frame, wrap=tk.WORD, 
                                    font=("Courier", 10))
        analysis_scroll = ttk.Scrollbar(analysis_frame, 
                                       command=self.analysis_text.yview)
        self.analysis_text.config(yscrollcommand=analysis_scroll.set)
        
        analysis_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.analysis_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Tab 3: Raw XML View
        raw_frame = ttk.Frame(notebook)
        notebook.add(raw_frame, text="Raw XML Preview")
        
        self.raw_text = tk.Text(raw_frame, wrap=tk.WORD, 
                               font=("Courier", 9))
        raw_scroll = ttk.Scrollbar(raw_frame, command=self.raw_text.yview)
        self.raw_text.config(yscrollcommand=raw_scroll.set)
        
        raw_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.raw_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
    def load_xml_files(self):
        """Load one or multiple XML files"""
        files = filedialog.askopenfilenames(
            title="Select XML Files",
            filetypes=[("XML files", "*.xml"), ("All files", "*.*")]
        )
        
        if files:
            self.xml_files = list(files)
            self.status_label.config(
                text=f"{len(self.xml_files)} file(s) loaded",
                foreground="green"
            )
            
            # Show preview of first file
            if self.xml_files:
                with open(self.xml_files[0], 'r', encoding='utf-8') as f:
                    content = f.read()
                    self.raw_text.delete(1.0, tk.END)
                    self.raw_text.insert(1.0, content[:5000] + 
                                        "\n\n... (truncated for preview)")
    
    def parse_description_field(self, description):
        """Parse the description field to extract key-value pairs"""
        if not description:
            return {}
        
        # Dictionary to store extracted fields
        fields = {}
        
        # Common patterns in JIRA descriptions
        patterns = {
            'Date of Request': r'Date of Request[:\s]+([^\n]+)',
            'Name of Requestor': r'Name of Requestor[:\s]+([^\n]+)',
            'Requestor\'s Email Address': r'Requestor[\']*s Email Address[:\s]+([^\n]+)',
            'Business Segment / Corporate Function': r'Business Segment.*?[:\s]+([^\n]+)',
            'Please select the type of output': r'Please select.*?output[:\s]+([^\n]+)',
            'Name of Output': r'Name of Output[:\s]+([^\n]+)',
            'What is the scope': r'What is the scope.*?[:\s]+([^\n]+)',
            'What is the purpose': r'What is the purpose.*?[:\s]+([^\n]+)',
            'Name of Data Owner': r'Name of Data Owner[:\s]+([^\n]+)',
            'Link to Data Owner Approval': r'Link to Data Owner Approval.*?[:\s]+(https?://[^\s]+)',
        }
        
        for field_name, pattern in patterns.items():
            match = re.search(pattern, description, re.IGNORECASE)
            if match:
                fields[field_name] = match.group(1).strip()
            else:
                fields[field_name] = ""
        
        return fields
    
    def extract_data(self):
        """Extract data from all loaded XML files"""
        if not self.xml_files:
            messagebox.showwarning("No Files", 
                                  "Please load XML files first!")
            return
        
        self.extracted_data = []
        
        for xml_file in self.xml_files:
            try:
                tree = ET.parse(xml_file)
                root = tree.getroot()
                
                # Find all items (JIRA issues)
                for item in root.findall('.//item'):
                    record = {}
                    
                    # Extract basic fields
                    record['File'] = os.path.basename(xml_file)
                    record['Key'] = self.get_text(item, 'key')
                    record['Summary'] = self.get_text(item, 'summary')
                    record['Type'] = self.get_text(item, 'type')
                    record['Status'] = self.get_text(item, 'status')
                    record['Priority'] = self.get_text(item, 'priority')
                    record['Assignee'] = self.get_text(item, 'assignee')
                    record['Reporter'] = self.get_text(item, 'reporter')
                    record['Created'] = self.get_text(item, 'created')
                    record['Updated'] = self.get_text(item, 'updated')
                    
                    # Extract and parse description
                    description = self.get_text(item, 'description')
                    parsed_fields = self.parse_description_field(description)
                    
                    # Merge parsed fields
                    record.update(parsed_fields)
                    
                    # Store raw description as well
                    record['Raw Description'] = description
                    
                    self.extracted_data.append(record)
                    
            except Exception as e:
                messagebox.showerror("Error", 
                                   f"Error parsing {xml_file}:\n{str(e)}")
        
        if self.extracted_data:
            self.display_data()
            self.generate_analysis()
            self.status_label.config(
                text=f"Extracted {len(self.extracted_data)} record(s)",
                foreground="green"
            )
        else:
            messagebox.showwarning("No Data", 
                                  "No data could be extracted from the XML files.")
    
    def get_text(self, element, tag):
        """Safely get text from XML element"""
        child = element.find(tag)
        return child.text if child is not None and child.text else ""
    
    def display_data(self):
        """Display extracted data in treeview"""
        # Clear existing data
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        if not self.extracted_data:
            return
        
        # Get columns (exclude raw description for display)
        columns = [k for k in self.extracted_data[0].keys() 
                  if k != 'Raw Description']
        
        self.tree['columns'] = columns
        self.tree['show'] = 'headings'
        
        # Configure columns
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150, minwidth=100)
        
        # Insert data
        for record in self.extracted_data:
            values = [record.get(col, "") for col in columns]
            self.tree.insert('', tk.END, values=values)
    
    def generate_analysis(self):
        """Generate summary analysis of the data"""
        self.analysis_text.delete(1.0, tk.END)
        
        if not self.extracted_data:
            return
        
        df = pd.DataFrame(self.extracted_data)
        
        analysis = "=" * 60 + "\n"
        analysis += "DATA SUMMARY\n"
        analysis += "=" * 60 + "\n\n"
        
        analysis += f"Total Records: {len(self.extracted_data)}\n"
        analysis += f"Total XML Files: {len(self.xml_files)}\n\n"
        
        # Status breakdown
        if 'Status' in df.columns:
            analysis += "\n--- Status Breakdown ---\n"
            status_counts = df['Status'].value_counts()
            for status, count in status_counts.items():
                analysis += f"  {status}: {count}\n"
        
        # Type breakdown
        if 'Type' in df.columns:
            analysis += "\n--- Issue Type Breakdown ---\n"
            type_counts = df['Type'].value_counts()
            for issue_type, count in type_counts.items():
                analysis += f"  {issue_type}: {count}\n"
        
        # Business Segment breakdown
        if 'Business Segment / Corporate Function' in df.columns:
            analysis += "\n--- Business Segment Breakdown ---\n"
            segment_counts = df['Business Segment / Corporate Function'].value_counts()
            for segment, count in segment_counts.items():
                if segment:
                    analysis += f"  {segment}: {count}\n"
        
        # Requestor breakdown
        if 'Name of Requestor' in df.columns:
            analysis += "\n--- Top Requestors ---\n"
            requestor_counts = df['Name of Requestor'].value_counts().head(10)
            for requestor, count in requestor_counts.items():
                if requestor:
                    analysis += f"  {requestor}: {count}\n"
        
        # Date range
        if 'Date of Request' in df.columns:
            analysis += "\n--- Date Range ---\n"
            dates = df['Date of Request'].dropna()
            if not dates.empty:
                analysis += f"  Earliest: {dates.min()}\n"
                analysis += f"  Latest: {dates.max()}\n"
        
        self.analysis_text.insert(1.0, analysis)
    
    def export_to_excel(self):
        """Export extracted data to Excel file"""
        if not self.extracted_data:
            messagebox.showwarning("No Data", 
                                  "Please extract data first!")
            return
        
        # Ask for filename
        filename = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
            initialfile=f"JIRA_Extract_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        )
        
        if filename:
            try:
                df = pd.DataFrame(self.extracted_data)
                
                # Create Excel writer
                with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                    # Main data sheet
                    df.to_excel(writer, sheet_name='Extracted Data', index=False)
                    
                    # Summary sheet
                    summary_data = {
                        'Metric': ['Total Records', 'Total Files', 'Export Date'],
                        'Value': [len(self.extracted_data), 
                                len(self.xml_files),
                                datetime.now().strftime('%Y-%m-%d %H:%M:%S')]
                    }
                    pd.DataFrame(summary_data).to_excel(
                        writer, sheet_name='Summary', index=False
                    )
                    
                    # Auto-adjust column widths
                    for sheet_name in writer.sheets:
                        worksheet = writer.sheets[sheet_name]
                        for column in worksheet.columns:
                            max_length = 0
                            column_letter = column[0].column_letter
                            for cell in column:
                                try:
                                    if len(str(cell.value)) > max_length:
                                        max_length = len(str(cell.value))
                                except:
                                    pass
                            adjusted_width = min(max_length + 2, 50)
                            worksheet.column_dimensions[column_letter].width = adjusted_width
                
                messagebox.showinfo("Success", 
                                  f"Data exported successfully to:\n{filename}")
                self.status_label.config(
                    text=f"Exported to {os.path.basename(filename)}",
                    foreground="green"
                )
                
            except Exception as e:
                messagebox.showerror("Error", 
                                   f"Error exporting to Excel:\n{str(e)}")
    
    def clear_all(self):
        """Clear all data and reset"""
        self.xml_files = []
        self.extracted_data = []
        
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        self.analysis_text.delete(1.0, tk.END)
        self.raw_text.delete(1.0, tk.END)
        
        self.status_label.config(text="Cleared all data", foreground="blue")

def main():
    root = tk.Tk()
    app = JiraXMLExtractor(root)
    root.mainloop()

if __name__ == "__main__":
    main()
